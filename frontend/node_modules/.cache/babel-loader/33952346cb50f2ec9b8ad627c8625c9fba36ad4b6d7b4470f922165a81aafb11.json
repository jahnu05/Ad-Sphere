{"ast":null,"code":"var _jsxFileName = \"/home/jahnavi/resume/final_projects/code(1)/code/Ad-Sphere/frontend/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport AdvertiserHome from \"./Dashboards/AdvertiserHome\";\nimport LogisticsHome from \"./Dashboards/LogisticsHome\";\nimport { useNavigate } from \"react-router-dom\";\nimport AdminHome from \"./Dashboards/AdminHome\";\nimport \"./dashboard.css\";\nimport Header from \"./Components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const navigate = useNavigate(); // Navigation hook\n\n  // State variable to store user type (-1 indicates loading state)\n  // change here to -1. Currently user state - 0\n  const [type, setType] = useState(-1);\n  useEffect(() => {\n    // Fetch user information from the backend on component mount\n    axios.get(\"/verify-login\").then(res => {\n      if (res.data.valid) {\n        // Check if user is authenticated\n\n        if (res.data.type.toLowerCase() == \"advertiser\") setType(1); // Set type to 1 for advertiser\n        else if (res.data.type.toLowerCase() == \"admin\") setType(0); // Set type to 0 for admin\n        else setType(\"10\"); // Set type to \"10\" for logistics\n      } else {\n        // If user is not authenticated, redirect to home page\n        // uncomment this\n        navigate(\"/\", {\n          replace: true\n        });\n      }\n    });\n  }, []); // Empty dependency array ensures that useEffect runs only once\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children:\n      // have to check admin login also\n      type === 0 ? /*#__PURE__*/_jsxDEV(AdminHome, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this) : type === 1 ? /*#__PURE__*/_jsxDEV(AdvertiserHome, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this) : type === \"10\" ? /*#__PURE__*/_jsxDEV(LogisticsHome, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Dashboard, \"vMbq7I977nvo4f010QCH2VGtO00=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["axios","React","useEffect","useState","AdvertiserHome","LogisticsHome","useNavigate","AdminHome","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","navigate","type","setType","get","then","res","data","valid","toLowerCase","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/home/jahnavi/resume/final_projects/code(1)/code/Ad-Sphere/frontend/src/Dashboard.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport AdvertiserHome from \"./Dashboards/AdvertiserHome\";\nimport LogisticsHome from \"./Dashboards/LogisticsHome\";\nimport { useNavigate } from \"react-router-dom\";\nimport AdminHome from \"./Dashboards/AdminHome\";\nimport \"./dashboard.css\"\nimport Header from \"./Components/Header\";\n\nfunction Dashboard() {\n    const navigate = useNavigate(); // Navigation hook\n    \n    // State variable to store user type (-1 indicates loading state)\n    // change here to -1. Currently user state - 0\n    const [type, setType] = useState(-1);\n\n    useEffect(() => {\n\n        // Fetch user information from the backend on component mount\n        axios.get(\"/verify-login\").then((res) => {\n            if (res.data.valid) {   // Check if user is authenticated\n\n                if (res.data.type.toLowerCase() == \"advertiser\")\n                    setType(1); // Set type to 1 for advertiser\n\n                else if(res.data.type.toLowerCase() == \"admin\")\n                    setType(0); // Set type to 0 for admin\n\n                else\n                    setType(\"10\");  // Set type to \"10\" for logistics\n            }\n            else{\n\n                // If user is not authenticated, redirect to home page\n                // uncomment this\n                navigate(\"/\", {replace: true})\n            }\n        });\n\n    }, [])  // Empty dependency array ensures that useEffect runs only once\n\n    return (\n        <>\n            <Header type={type}/>\n            <div className=\"dashboard-container\">\n                {\n                    // have to check admin login also\n                    type === 0 ?\n                    <AdminHome /> : type === 1 ?\n                    <AdvertiserHome/> : type === \"10\" ?\n                    <LogisticsHome/> : <h1></h1>\n                }\n            </div>\n        </>\n    )\n}\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAO,iBAAiB;AACxB,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA;EACA,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpCD,SAAS,CAAC,MAAM;IAEZ;IACAF,KAAK,CAACkB,GAAG,CAAC,eAAe,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;MACrC,IAAIA,GAAG,CAACC,IAAI,CAACC,KAAK,EAAE;QAAI;;QAEpB,IAAIF,GAAG,CAACC,IAAI,CAACL,IAAI,CAACO,WAAW,CAAC,CAAC,IAAI,YAAY,EAC3CN,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAAA,KAEX,IAAGG,GAAG,CAACC,IAAI,CAACL,IAAI,CAACO,WAAW,CAAC,CAAC,IAAI,OAAO,EAC1CN,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAAA,KAGZA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;MACxB,CAAC,MACG;QAEA;QACA;QACAF,QAAQ,CAAC,GAAG,EAAE;UAACS,OAAO,EAAE;QAAI,CAAC,CAAC;MAClC;IACJ,CAAC,CAAC;EAEN,CAAC,EAAE,EAAE,CAAC,EAAE;;EAER,oBACId,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACIf,OAAA,CAACF,MAAM;MAACQ,IAAI,EAAEA;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACrBnB,OAAA;MAAKoB,SAAS,EAAC,qBAAqB;MAAAL,QAAA;MAE5B;MACAT,IAAI,KAAK,CAAC,gBACVN,OAAA,CAACH,SAAS;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,GAAGb,IAAI,KAAK,CAAC,gBAC1BN,OAAA,CAACN,cAAc;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,GAAGb,IAAI,KAAK,IAAI,gBACjCN,OAAA,CAACL,aAAa;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,gBAAGnB,OAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE/B,CAAC;EAAA,eACR,CAAC;AAEX;AAACf,EAAA,CA9CQD,SAAS;EAAA,QACGP,WAAW;AAAA;AAAAyB,EAAA,GADvBlB,SAAS;AAgDlB,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}