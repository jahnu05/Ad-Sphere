{"ast":null,"code":"var _jsxFileName = \"/home/jahnavi/resume/final_projects/code(1)/code/Ad-Sphere/frontend/src/dummy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport FormBuilder from \"./FormBuilder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dummy = () => {\n  _s();\n  // Extracting the 'qr_link_id' query parameter from the URL using useSearchParams\n  const [searchparams] = useSearchParams();\n  const id = searchparams.get('qr_link_id');\n\n  // State to track if the QR code is valid\n  const [valid, setvalid] = useState(false);\n\n  // Effect hook to fetch data from the server when the component mounts\n  useEffect(() => {\n    // Logging the URL with the qr_link_id\n    console.log(`/verify-qr?qr_link_id=${id}`);\n\n    // Making a GET request to the server to verify the QR code\n    axios.get(`/verify-qr?qr_link_id=${id}`).then(res => {\n      // Logging the response from the server\n      console.log(res);\n      // If the server response indicates success, update the 'valid' state\n      if (res.data.success === true) {\n        const newvalid = !valid;\n        setvalid(newvalid);\n      }\n    }).catch(err => console.log(err));\n  }, []); // Empty dependency array ensures this effect runs only once, similar to componentDidMount\n\n  // Function to display the content if the QR code is valid\n  const displayContent = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormBuilder, {\n        qr_link_id: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true);\n  };\n\n  // Render content based on the 'valid' state\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: valid ? displayContent() : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"page not found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 41\n    }, this)\n  }, void 0, false);\n};\n_s(Dummy, \"BaSM7uyw8o8mbT1EeuhBiU8pql0=\", false, function () {\n  return [useSearchParams];\n});\n_c = Dummy;\nexport default Dummy;\nvar _c;\n$RefreshReg$(_c, \"Dummy\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useSearchParams","axios","FormBuilder","jsxDEV","_jsxDEV","Fragment","_Fragment","Dummy","_s","searchparams","id","get","valid","setvalid","console","log","then","res","data","success","newvalid","catch","err","displayContent","children","qr_link_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jahnavi/resume/final_projects/code(1)/code/Ad-Sphere/frontend/src/dummy.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport FormBuilder from \"./FormBuilder\";\n\nconst Dummy = () => {\n    // Extracting the 'qr_link_id' query parameter from the URL using useSearchParams\n    const [searchparams] = useSearchParams();\n    const id = searchparams.get('qr_link_id');\n\n    // State to track if the QR code is valid\n    const [valid, setvalid] = useState(false);\n\n    // Effect hook to fetch data from the server when the component mounts\n    useEffect(() => {\n        // Logging the URL with the qr_link_id\n        console.log(`/verify-qr?qr_link_id=${id}`)\n        \n        // Making a GET request to the server to verify the QR code\n        axios.get(`/verify-qr?qr_link_id=${id}`)\n            .then(res => {\n                // Logging the response from the server\n                console.log(res)\n                // If the server response indicates success, update the 'valid' state\n                if(res.data.success === true) {\n                    const newvalid = !valid\n                    setvalid(newvalid)\n                }\n            })\n            .catch(err => console.log(err))\n    }, []) // Empty dependency array ensures this effect runs only once, similar to componentDidMount\n\n    // Function to display the content if the QR code is valid\n    const displayContent = () => {\n        return (\n            <>\n                <FormBuilder qr_link_id={id}/> {/* Pass the qr_link_id to the FormBuilder component */}\n            </>\n        )\n    }\n    \n    // Render content based on the 'valid' state\n    return (\n        <>\n            {valid ? displayContent() : <p>page not found!</p>}\n        </>\n    )\n}\n\nexport default Dummy\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,YAAY,CAAC,GAAGT,eAAe,CAAC,CAAC;EACxC,MAAMU,EAAE,GAAGD,YAAY,CAACE,GAAG,CAAC,YAAY,CAAC;;EAEzC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAEzC;EACAD,SAAS,CAAC,MAAM;IACZ;IACAiB,OAAO,CAACC,GAAG,CAAE,yBAAwBL,EAAG,EAAC,CAAC;;IAE1C;IACAT,KAAK,CAACU,GAAG,CAAE,yBAAwBD,EAAG,EAAC,CAAC,CACnCM,IAAI,CAACC,GAAG,IAAI;MACT;MACAH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;MAChB;MACA,IAAGA,GAAG,CAACC,IAAI,CAACC,OAAO,KAAK,IAAI,EAAE;QAC1B,MAAMC,QAAQ,GAAG,CAACR,KAAK;QACvBC,QAAQ,CAACO,QAAQ,CAAC;MACtB;IACJ,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAIR,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC,EAAC;;EAEP;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,oBACInB,OAAA,CAAAE,SAAA;MAAAkB,QAAA,gBACIpB,OAAA,CAACF,WAAW;QAACuB,UAAU,EAAEf;MAAG;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,KAAC;IAAA,eACjC,CAAC;EAEX,CAAC;;EAED;EACA,oBACIzB,OAAA,CAAAE,SAAA;IAAAkB,QAAA,EACKZ,KAAK,GAAGW,cAAc,CAAC,CAAC,gBAAGnB,OAAA;MAAAoB,QAAA,EAAG;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC,gBACpD,CAAC;AAEX,CAAC;AAAArB,EAAA,CA1CKD,KAAK;EAAA,QAEgBP,eAAe;AAAA;AAAA8B,EAAA,GAFpCvB,KAAK;AA4CX,eAAeA,KAAK;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}