{"ast":null,"code":"var _jsxFileName = \"/home/jahnavi/resume/final_projects/code(1)/code/Ad-Sphere/frontend/src/FormBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './FormBuilder.css';\nimport axios from \"axios\";\nimport Header from \"./Components/Header\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FormBuilder({\n  qr_link_id\n}) {\n  _s();\n  const navigate = useNavigate();\n  // State to hold questions fetched from the server\n  const [questions, setQuestions] = useState([]);\n  // State to hold the user's responses to the questions\n  const [responses, setResponses] = useState({});\n  // State to track the submission status (\"success\" or null)\n  const [submissionStatus, setSubmissionStatus] = useState(null);\n\n  // Array of city names for region-related dropdown questions\n  const [cities, setCities] = useState([\"Agra\", \"Ahmedabad\", \"Allahabad\", \"Amritsar\", \"Aurangabad\", \"Bangalore\", \"Bhopal\", \"Chandigarh\", \"Chennai\", \"Coimbatore\", \"Delhi\", \"Faridabad\", \"Ghaziabad\", \"Goa\", \"Gurgaon\", \"Guwahati\", \"Hyderabad\", \"Indore\", \"Jaipur\", \"Jodhpur\", \"Kanpur\", \"Kochi\", \"Kolkata\", \"Lucknow\", \"Ludhiana\", \"Madurai\", \"Mumbai\", \"Nagpur\", \"Nashik\", \"Navi Mumbai\", \"Noida\", \"Patna\", \"Pune\", \"Rajkot\", \"Surat\", \"Thane\", \"Vadodara\", \"Varanasi\", \"Visakhapatnam\"]);\n\n  // Array of interest categories for interest-related checkbox questions\n  const [interests, setInterests] = useState([\"Arts & Crafts\", \"Beauty & Personal Care\", \"Books & Literature\", \"Clothing & Apparel\", \"Electronic Gadgets\", \"Fashion Design & Styling\", \"Food & Beverages\", \"Health & Wellness Products\", \"Home Decor\", \"Music & Entertainment\", \"Photography & Videography\", \"Sports & Outdoors\", \"Technology & Software\"]);\n\n  // Add state variables for email and email verification status\n  const [email, setEmail] = useState('');\n  const [emailVerified, setEmailVerified] = useState(false);\n  const [showCategorizedQuestions, setShowCategorizedQuestions] = useState(false);\n  useEffect(() => {\n\n    // Fetch questions from the server when the component mounts\n    // axios.get(\"/questions\")\n    //     .then(res => {\n    //         setQuestions(res.data);\n    //     })\n    //     .catch(error => {\n    //         console.error(\"Error fetching questions:\", error);\n    //     });\n  }, []); // Run once on mount\n\n  // Handles user input changes for QA,Dropdown type questions\n  const handleInputChange = (questionId, value) => {\n    setResponses({\n      ...responses,\n      [questionId]: value\n    });\n  };\n\n  // Handles changes in checkbox inputs for MCQ type questions\n  const handleMCQInputChange = (questionId, value, isChecked) => {\n    // Update the responses state with the user's selections\n    setResponses(prevResponses => ({\n      ...prevResponses,\n      [questionId]: isChecked ? [...(prevResponses[questionId] || []), value] // Add the selected option\n      : (prevResponses[questionId] || []).filter(option => option !== value) // Remove the deselected option\n    }));\n  };\n\n  // Handles email verification\n  const handleEmailVerification = async () => {\n    try {\n      // Make an API call to verify the provided email\n      const response = await axios.get(`/verifyEmail?email=${email}`);\n      // Set email verification status and show categorized questions if the email exists\n      if (response.data.exists) {\n        setEmailVerified(true);\n        setShowCategorizedQuestions(true);\n      } else {\n        setEmailVerified(true);\n        setShowCategorizedQuestions(false);\n      }\n      axios.get(\"/questions?email=\" + email) // Fetch questions based on the verified email\n      .then(res => {\n        setQuestions(res.data);\n      }).catch(error => {\n        console.error(\"Error fetching questions:\", error);\n      });\n    } catch (error) {\n      console.error(\"Error verifying email:\", error);\n    }\n  };\n\n  // Function to render each question based on its type\n  const renderQuestion = question => {\n    // Conditionally render categorized questions if showCategorizedQuestions is true\n    if (showCategorizedQuestions && !question.categorize) {\n      return null;\n    }\n    // Skip non-mandatory questions if qr_link_id is present\n    if (qr_link_id && !question.mandatory) {\n      return null;\n    }\n    // if (!showCategorizedQuestions && question.categorize) {\n    //     return null;\n    // }\n\n    // Determine the type of question and render the appropriate input element\n    switch (question.que_type) {\n      case 'QA':\n        // Render text input for QA type questions\n        if (question.jsonName === 'email') {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question-label\",\n              children: [question.que, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mandatory-star\",\n                children: question.mandatory && '*'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 78\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              className: \"text-input\",\n              value: responses[question._id] || email,\n              onChange: e => handleInputChange(question._id, e.target.value),\n              placeholder: \"Your Email...\",\n              required: question.mandatory,\n              disabled: email != \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)]\n          }, question._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this);\n        } else if (question.jsonName === \"region\") {\n          // Render dropdown for region-related questions\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question-label\",\n              children: [question.que, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mandatory-star\",\n                children: question.mandatory && '*'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 78\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"dropdown\",\n              onChange: e => handleInputChange(question._id, e.target.value),\n              children: cities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: city,\n                children: city\n              }, city, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 53\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this)]\n          }, question._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this);\n        } else if (question.jsonName === \"interests\") {\n          // Render checkboxes for interest-related questions\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question-label\",\n              children: [question.que, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mandatory-star\",\n                children: question.mandatory && '*'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 78\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"checkbox-options\",\n              children: interests.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"checkbox-option\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `option-${question._id}-${index}`,\n                  className: \"checkbox-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    id: `option-${question._id}-${index}`,\n                    name: `option-${question._id}-${index}`,\n                    value: option,\n                    className: \"checkbox-input\",\n                    onChange: e => handleMCQInputChange(question._id, option, e.target.checked),\n                    checked: responses[question._id] && responses[question._id].includes(option)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"checkbox-custom\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 45\n                  }, this), option]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this)\n              }, `${question._id}-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)]\n          }, question._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this);\n        } else {\n          // Render general text input for other QA type questions\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question-label\",\n              children: [question.que, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mandatory-star\",\n                children: question.mandatory && '*'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 78\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"text-input\",\n              onChange: e => handleInputChange(question._id, e.target.value),\n              placeholder: \"Your Response...\",\n              required: question.mandatory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)]\n          }, question._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this);\n        }\n      case 'MCQ':\n        // Render checkboxes for MCQ type questions\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"question-label\",\n            children: [question.que, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mandatory-star\",\n              children: question.mandatory && '*'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 74\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-options\",\n            children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"checkbox-option\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: `option-${question._id}-${index}`,\n                className: \"checkbox-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  id: `option-${question._id}-${index}`,\n                  name: `option-${question._id}-${index}`,\n                  value: option,\n                  className: \"checkbox-input\",\n                  onChange: e => handleMCQInputChange(question._id, option, e.target.checked),\n                  checked: responses[question._id] && responses[question._id].includes(option)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"checkbox-custom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 41\n                }, this), option]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }, this)\n            }, `${question._id}-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, question._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this);\n      case 'DROPDOWN':\n        // Render a dropdown input for dropdown type questions\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"question-label\",\n            children: [question.que, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mandatory-star\",\n              children: question.mandatory && '*'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 74\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"dropdown\",\n            onChange: e => handleInputChange(question._id, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this), question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)]\n        }, question._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this);\n      default:\n        // Return null for unknown question types\n        return null;\n    }\n  };\n  // State to hold the website URL to redirect the user to\n  const [website_url, setwebsite_url] = useState(\"\");\n\n  // Handles form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Separate responses into normal and categorized based on the question category\n      const normalResponses = {};\n      const categorizedResponses = {};\n      Object.entries(responses).forEach(([questionId, response]) => {\n        const question = questions.find(q => q._id === questionId);\n        if (question) {\n          if (question.categorize) {\n            // Store categorized responses\n            if (question.jsonName.length > 1) {\n              categorizedResponses[question.jsonName] = response;\n            } else {\n              categorizedResponses[question._id] = response;\n            }\n          } else {\n            // Store normal responses\n            normalResponses[question.jsonName] = response;\n          }\n        }\n      });\n      // Add email to the normal responses\n      normalResponses[\"email\"] = email;\n\n      // Combine normal and categorized responses\n      const combinedResponses = {\n        normalResponses,\n        categorizedResponses\n      };\n\n      // Send form data to the server based on qr_link_id\n      if (!qr_link_id) {\n        // Send data for a normal form\n        await axios.post('/formResponses', combinedResponses);\n      } else {\n        // Send data for a QR link form and receive website URL for redirection\n        const response = await axios.post(`/record-customer-interaction?qr_link_id=${qr_link_id}`, combinedResponses);\n        console.log(response);\n        console.log(response.data.websiteUrl);\n        setwebsite_url(response.data.websiteUrl);\n      }\n      // Update submission status and reset responses state\n      setSubmissionStatus(\"success\");\n      console.log('Form data uploaded successfully');\n      setResponses({});\n    } catch (error) {\n      console.error('Error uploading form data:', error);\n      setSubmissionStatus(\"error\");\n    }\n  };\n\n  // Redirect the user to the website URL after a delay if qr_link_id is present\n  function redirectToWebsite() {\n    console.log(website_url);\n    setTimeout(() => {\n      window.location.href = website_url;\n    }, 3000);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: submissionStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-builder-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heads\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"submit-message\",\n          children: \"Submitted successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"submit-message\",\n          children: \"Thank You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this), qr_link_id && redirectToWebsite()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-builder-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heads\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"headings\",\n          children: \"Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"instructions\",\n          children: \"\\xA0* indicates required question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"consent-div\",\n          children: [\"By submitting this form, you consent to \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Box Ads\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 69\n          }, this), \"'s data collection, processing, and use of the information provided in accordance with our Privacy Policy. You understand that the information collected may be used for purposes including but not limited to: communication with you, providing products or services requested, personalization of content, analysis of user behavior, and compliance with legal obligations.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-builder-container\",\n        children: !emailVerified ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"question-label\",\n            children: [\"Email\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mandatory-star\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            className: \"text-input\",\n            placeholder: \"Enter your email...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleEmailVerification,\n            className: \"submit-button\",\n            disabled: !email,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [questions.map(question => renderQuestion(question)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(FormBuilder, \"7ijccXX5vjBm4mRAYz0rWMxFJ/s=\", false, function () {\n  return [useNavigate];\n});\n_c = FormBuilder;\nexport default FormBuilder;\nvar _c;\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"names":["React","useState","useEffect","axios","Header","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","FormBuilder","qr_link_id","_s","navigate","questions","setQuestions","responses","setResponses","submissionStatus","setSubmissionStatus","cities","setCities","interests","setInterests","email","setEmail","emailVerified","setEmailVerified","showCategorizedQuestions","setShowCategorizedQuestions","handleInputChange","questionId","value","handleMCQInputChange","isChecked","prevResponses","filter","option","handleEmailVerification","response","get","data","exists","then","res","catch","error","console","renderQuestion","question","categorize","mandatory","que_type","jsonName","children","className","que","fileName","_jsxFileName","lineNumber","columnNumber","type","_id","onChange","e","target","placeholder","required","disabled","map","city","index","htmlFor","id","name","checked","includes","options","website_url","setwebsite_url","handleSubmit","preventDefault","normalResponses","categorizedResponses","Object","entries","forEach","find","q","length","combinedResponses","post","log","websiteUrl","redirectToWebsite","setTimeout","window","location","href","onClick","onSubmit","_c","$RefreshReg$"],"sources":["/home/jahnavi/resume/final_projects/code(1)/code/Ad-Sphere/frontend/src/FormBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './FormBuilder.css';\nimport axios from \"axios\";\nimport Header from \"./Components/Header\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction FormBuilder({ qr_link_id }) {\n    const navigate = useNavigate();\n    // State to hold questions fetched from the server\n    const [questions, setQuestions] = useState([]);\n    // State to hold the user's responses to the questions\n    const [responses, setResponses] = useState({});\n    // State to track the submission status (\"success\" or null)\n    const [submissionStatus, setSubmissionStatus] = useState(null);\n\n    // Array of city names for region-related dropdown questions\n    const [cities, setCities] = useState([\n        \"Agra\", \"Ahmedabad\", \"Allahabad\", \"Amritsar\", \"Aurangabad\",\n        \"Bangalore\", \"Bhopal\", \"Chandigarh\", \"Chennai\", \"Coimbatore\",\n        \"Delhi\", \"Faridabad\", \"Ghaziabad\", \"Goa\", \"Gurgaon\", \"Guwahati\",\n        \"Hyderabad\", \"Indore\", \"Jaipur\", \"Jodhpur\", \"Kanpur\", \"Kochi\",\n        \"Kolkata\", \"Lucknow\", \"Ludhiana\", \"Madurai\", \"Mumbai\", \"Nagpur\",\n        \"Nashik\", \"Navi Mumbai\", \"Noida\", \"Patna\", \"Pune\", \"Rajkot\",\n        \"Surat\", \"Thane\", \"Vadodara\", \"Varanasi\", \"Visakhapatnam\"\n    ]);\n\n    // Array of interest categories for interest-related checkbox questions\n    const [interests, setInterests] = useState([\n        \"Arts & Crafts\", \"Beauty & Personal Care\", \"Books & Literature\", \"Clothing & Apparel\",\n        \"Electronic Gadgets\", \"Fashion Design & Styling\", \"Food & Beverages\",\n        \"Health & Wellness Products\", \"Home Decor\", \"Music & Entertainment\",\n        \"Photography & Videography\", \"Sports & Outdoors\", \"Technology & Software\",\n    ]);\n\n    // Add state variables for email and email verification status\n    const [email, setEmail] = useState('');\n    const [emailVerified, setEmailVerified] = useState(false);\n    const [showCategorizedQuestions, setShowCategorizedQuestions] = useState(false);\n\n    useEffect(() => {\n        \n        // Fetch questions from the server when the component mounts\n        // axios.get(\"/questions\")\n         //     .then(res => {\n        //         setQuestions(res.data);\n        //     })\n        //     .catch(error => {\n        //         console.error(\"Error fetching questions:\", error);\n        //     });\n    }, []); // Run once on mount\n\n    // Handles user input changes for QA,Dropdown type questions\n    const handleInputChange = (questionId, value) => {\n        setResponses({\n            ...responses,\n            [questionId]: value\n        });\n    };\n\n    // Handles changes in checkbox inputs for MCQ type questions\n    const handleMCQInputChange = (questionId, value, isChecked) => {\n        // Update the responses state with the user's selections\n        setResponses(prevResponses => ({\n            ...prevResponses,\n            [questionId]: isChecked\n                ? [...(prevResponses[questionId] || []), value] // Add the selected option\n                : (prevResponses[questionId] || []).filter(option => option !== value) // Remove the deselected option\n        }));\n    };\n\n    // Handles email verification\n    const handleEmailVerification = async () => {\n        try {\n            // Make an API call to verify the provided email\n            const response = await axios.get(`/verifyEmail?email=${email}`);\n            // Set email verification status and show categorized questions if the email exists\n            if (response.data.exists) {\n                setEmailVerified(true);\n                setShowCategorizedQuestions(true);\n            }\n            else {\n                setEmailVerified(true);\n                setShowCategorizedQuestions(false);\n            }\n            axios.get(\"/questions?email=\"+email) // Fetch questions based on the verified email\n                .then(res => {\n                    setQuestions(res.data);\n                })\n                .catch(error => {\n                    console.error(\"Error fetching questions:\", error);\n                });\n        } catch (error) {\n            console.error(\"Error verifying email:\", error);\n        }\n    };\n\n    // Function to render each question based on its type\n    const renderQuestion = (question) => {\n        // Conditionally render categorized questions if showCategorizedQuestions is true\n        if (showCategorizedQuestions && !question.categorize) {\n            return null;\n        }\n        // Skip non-mandatory questions if qr_link_id is present\n        if (qr_link_id && !question.mandatory) {\n            return null\n        }\n        // if (!showCategorizedQuestions && question.categorize) {\n        //     return null;\n        // }\n\n        // Determine the type of question and render the appropriate input element\n        switch (question.que_type) {\n            case 'QA':\n                // Render text input for QA type questions\n                if (question.jsonName === 'email') {\n                    return (\n                        <div key={question._id}>\n                            <label className=\"question-label\">{question.que} <span className=\"mandatory-star\">{question.mandatory && '*'}</span></label>\n                            <input\n                                type=\"email\"\n                                className=\"text-input\"\n                                value={responses[question._id] || email}\n                                onChange={(e) => handleInputChange(question._id, e.target.value)}\n                                placeholder=\"Your Email...\"\n                                required={question.mandatory}\n                                disabled={email != \"\"}\n                            />\n                        </div>\n                    );\n                } else if (question.jsonName === \"region\") {\n                    // Render dropdown for region-related questions\n                    return (\n                        <div key={question._id}>\n                            <label className=\"question-label\">{question.que} <span className=\"mandatory-star\">{question.mandatory && '*'}</span></label>\n                            <select\n                                className=\"dropdown\"\n                                onChange={(e) => handleInputChange(question._id, e.target.value)}\n                            >\n                                {cities.map(city => <option key={city} value={city}>{city}</option>)}\n                            </select>\n                        </div>\n                    );\n                } else if (question.jsonName === \"interests\") {\n                    // Render checkboxes for interest-related questions\n                    return (\n                        <div key={question._id}>\n                            <label className=\"question-label\">{question.que} <span className=\"mandatory-star\">{question.mandatory && '*'}</span></label>\n                            <div className=\"checkbox-options\">\n                                {interests.map((option, index) => (\n                                    <div key={`${question._id}-${index}`} className=\"checkbox-option\">\n                                        <label htmlFor={`option-${question._id}-${index}`} className=\"checkbox-container\">\n                                            <input\n                                                type=\"checkbox\"\n                                                id={`option-${question._id}-${index}`}\n                                                name={`option-${question._id}-${index}`}\n                                                value={option}\n                                                className=\"checkbox-input\"\n                                                onChange={(e) => handleMCQInputChange(question._id, option, e.target.checked)}\n                                                checked={responses[question._id] && responses[question._id].includes(option)}\n                                            />\n                                            <span className=\"checkbox-custom\"></span>\n                                            {option}\n                                        </label>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )\n                }\n                else {\n                    // Render general text input for other QA type questions\n                    return (\n                        <div key={question._id}>\n                            <label className=\"question-label\">{question.que} <span className=\"mandatory-star\">{question.mandatory && '*'}</span></label>\n                            <input\n                                type=\"text\"\n                                className=\"text-input\"\n                                onChange={(e) => handleInputChange(question._id, e.target.value)}\n                                placeholder=\"Your Response...\"\n                                required={question.mandatory}\n                            />\n                        </div>\n                    );\n                }\n            case 'MCQ':\n                // Render checkboxes for MCQ type questions\n                return (\n                    <div key={question._id}>\n                        <label className=\"question-label\">{question.que} <span className=\"mandatory-star\">{question.mandatory && '*'}</span></label>\n                        <div className=\"checkbox-options\">\n                            {question.options.map((option, index) => (\n                                <div key={`${question._id}-${index}`} className=\"checkbox-option\">\n                                    <label htmlFor={`option-${question._id}-${index}`} className=\"checkbox-container\">\n                                        <input\n                                            type=\"checkbox\"\n                                            id={`option-${question._id}-${index}`}\n                                            name={`option-${question._id}-${index}`}\n                                            value={option}\n                                            className=\"checkbox-input\"\n                                            onChange={(e) => handleMCQInputChange(question._id, option, e.target.checked)}\n                                            checked={responses[question._id] && responses[question._id].includes(option)}\n                                        />\n                                        <span className=\"checkbox-custom\"></span>\n                                        {option}\n                                    </label>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                );\n            case 'DROPDOWN':\n                // Render a dropdown input for dropdown type questions\n                return (\n                    <div key={question._id}>\n                        <label className=\"question-label\">{question.que} <span className=\"mandatory-star\">{question.mandatory && '*'}</span></label>\n                        <select\n                            className=\"dropdown\"\n                            onChange={(e) => handleInputChange(question._id, e.target.value)}\n                        >\n                            <option value=\"\">Select</option>\n                            {question.options.map((option, index) => (\n                                <option key={index} value={option}>{option}</option>\n                            ))}\n                        </select>\n                    </div>\n                );\n            default:\n                // Return null for unknown question types\n                return null;\n        }\n    };\n    // State to hold the website URL to redirect the user to\n    const [website_url,setwebsite_url] = useState(\"\");\n    \n    // Handles form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            // Separate responses into normal and categorized based on the question category\n            const normalResponses = {};\n            const categorizedResponses = {};\n            Object.entries(responses).forEach(([questionId, response]) => {\n                const question = questions.find(q => q._id === questionId);\n                if (question) {\n                    if (question.categorize) {\n                        // Store categorized responses\n                        if (question.jsonName.length > 1) {\n                            categorizedResponses[question.jsonName] = response;\n                        }\n                        else {\n                            categorizedResponses[question._id] = response;\n                        }\n                    } else {\n                        // Store normal responses\n                        normalResponses[question.jsonName] = response;\n                    }\n                }\n            });\n             // Add email to the normal responses\n            normalResponses[\"email\"] = email\n\n            // Combine normal and categorized responses\n            const combinedResponses = {\n                normalResponses,\n                categorizedResponses\n            };\n\n            // Send form data to the server based on qr_link_id\n            if (!qr_link_id) {\n                // Send data for a normal form\n                await axios.post('/formResponses', combinedResponses);\n            }\n            else {\n                // Send data for a QR link form and receive website URL for redirection\n                const response = await axios.post(`/record-customer-interaction?qr_link_id=${qr_link_id}`, combinedResponses);\n                console.log(response)\n                console.log(response.data.websiteUrl)\n                setwebsite_url(response.data.websiteUrl)\n            }\n            // Update submission status and reset responses state\n            setSubmissionStatus(\"success\");\n            console.log('Form data uploaded successfully');\n            setResponses({});\n            \n        } catch (error) {\n            console.error('Error uploading form data:', error);\n            setSubmissionStatus(\"error\");\n        }\n    };\n\n    // Redirect the user to the website URL after a delay if qr_link_id is present\n    function redirectToWebsite()\n    {\n        console.log(website_url);\n        setTimeout(() => {\n            window.location.href = website_url;\n        }, 3000);\n    }\n    return (\n        <>\n            {submissionStatus === \"success\" ? (\n                <div className=\"form-builder-main\">\n                    <div className=\"heads\">\n                        <p className=\"submit-message\">Submitted successfully!</p>\n                        <p className=\"submit-message\">Thank You</p>\n                        {qr_link_id && redirectToWebsite()}\n                    </div>\n                </div>\n            ) : (\n                <div className=\"form-builder-main\">\n                    <div className=\"heads\">\n                        <h1 className=\"headings\">Questions</h1>\n                        <p className=\"instructions\">&nbsp;* indicates required question</p>\n                        <p className=\"consent-div\">\n                            By submitting this form, you consent to <b>Box Ads</b>'s data collection, processing, and use of the information provided in accordance with our Privacy Policy. You understand that the information collected may be used for purposes including but not limited to: communication with you, providing products or services requested, personalization of content, analysis of user behavior, and compliance with legal obligations.\n                        </p>\n                    </div>\n                    <div className=\"form-builder-container\">\n                        {!emailVerified ? (\n                            <div>\n                                <label className=\"question-label\">\n                                    Email<span className=\"mandatory-star\">*</span>\n                                </label>\n                                <input\n                                    type=\"email\"\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                    className=\"text-input\"\n                                    placeholder=\"Enter your email...\"\n                                    required\n                                />\n                                <button\n                                    onClick={handleEmailVerification}\n                                    className=\"submit-button\"\n                                    disabled={!email}\n                                >\n                                    Next\n                                </button>\n                            </div>\n                        ) : (\n                            <form onSubmit={handleSubmit}>\n                                {/* {console.log(questions)} */}\n                                {questions.map(question => renderQuestion(question))}\n                                <button type=\"submit\" className=\"submit-button\">Submit</button>\n                            </form>\n                        )}\n                    </div>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default FormBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}